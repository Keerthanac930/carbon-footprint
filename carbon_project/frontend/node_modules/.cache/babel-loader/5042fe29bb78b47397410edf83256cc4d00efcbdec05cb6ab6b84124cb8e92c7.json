{"ast":null,"code":"export const calculateProgress = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const filledFields = requiredFields.filter(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n  return filledFields.length / requiredFields.length * 100;\n};\nexport const validateForm = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  return requiredFields.every(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n};\nexport const calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round(inputs.electricity_usage_kwh / 1000 * 35);\n\n  // Transportation (25-30% of total)\n  breakdown.transportation = Math.round(inputs.vehicle_monthly_distance_km / 1000 * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_rate || 0.5;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  Object.keys(breakdown).forEach(key => {\n    breakdown[key] = Math.round(breakdown[key] / total * 100);\n  });\n  return breakdown;\n};","map":{"version":3,"names":["calculateProgress","formData","requiredFields","filledFields","filter","field","value","undefined","length","validateForm","every","calculateBreakdown","inputs","totalFootprint","breakdown","electricity","transportation","heating","waste","lifestyle","Math","round","electricity_usage_kwh","vehicle_monthly_distance_km","heatingEfficiency","heating_efficiency","recyclingRate","recycling_rate","renewable_energy_percentage","total","Object","values","reduce","a","b","keys","forEach","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/utils/formUtils.js"],"sourcesContent":["export const calculateProgress = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const filledFields = requiredFields.filter(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  return (filledFields.length / requiredFields.length) * 100;\r\n};\r\n\r\nexport const validateForm = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  return requiredFields.every(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n};\r\n\r\nexport const calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total)\r\n  breakdown.transportation = Math.round((inputs.vehicle_monthly_distance_km / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_rate || 0.5;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  Object.keys(breakdown).forEach(key => {\r\n    breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n  });\r\n\r\n  return breakdown;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}