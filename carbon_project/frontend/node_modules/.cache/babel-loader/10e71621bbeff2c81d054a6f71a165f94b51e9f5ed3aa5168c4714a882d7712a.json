{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('Making API request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log('API response received:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\nexport const submitCarbonData = async formData => {\n  try {\n    console.log('Submitting carbon data:', formData);\n    const response = await api.post('/predict', formData);\n    if (!response.data) {\n      throw new Error('No data received from server');\n    }\n\n    // Calculate breakdown for the results\n    const breakdown = calculateBreakdown(formData, response.data.predicted_emissions);\n    const results = {\n      predicted_emissions: response.data.predicted_emissions,\n      confidence_score: response.data.confidence_score,\n      recommendations: response.data.recommendations || [],\n      breakdown: breakdown,\n      input_data: formData,\n      timestamp: new Date().toISOString()\n    };\n    console.log('Results prepared:', results);\n    return results;\n  } catch (error) {\n    console.error('Error submitting carbon data:', error);\n    if (error.response) {\n      var _error$response$data;\n      // Server responded with error status\n      throw new Error(`Server Error: ${error.response.status} - ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.response.statusText}`);\n    } else if (error.request) {\n      // Request was made but no response received\n      throw new Error('Network Error: Unable to connect to server. Please check your internet connection.');\n    } else {\n      // Something else happened\n      throw new Error(`Request Error: ${error.message}`);\n    }\n  }\n};\nexport const fetchModelDetails = async () => {\n  try {\n    const response = await api.get('/model-details');\n    return response.data;\n  } catch (error) {\n    console.warn('Could not fetch model details:', error);\n    return {\n      model_type: 'Random Forest',\n      version: '1.0.0',\n      training_date: '2024-01-01'\n    };\n  }\n};\n\n// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\nconst calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round(inputs.electricity_usage_kwh / 1000 * 35);\n\n  // Transportation (25-30% of total)\n  breakdown.transportation = Math.round(inputs.vehicle_monthly_distance_km / 1000 * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_rate || 0.5;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  Object.keys(breakdown).forEach(key => {\n    breakdown[key] = Math.round(breakdown[key] / total * 100);\n  });\n  return breakdown;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$response","_error$response2","submitCarbonData","formData","post","Error","breakdown","calculateBreakdown","predicted_emissions","results","confidence_score","recommendations","input_data","timestamp","Date","toISOString","_error$response$data","message","statusText","fetchModelDetails","get","warn","model_type","version","training_date","inputs","totalFootprint","electricity","transportation","heating","waste","lifestyle","Math","round","electricity_usage_kwh","vehicle_monthly_distance_km","heatingEfficiency","heating_efficiency","recyclingRate","recycling_rate","renewable_energy_percentage","total","Object","values","reduce","a","b","keys","forEach","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('Making API request:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API response received:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const submitCarbonData = async (formData) => {\r\n  try {\r\n    console.log('Submitting carbon data:', formData);\r\n    \r\n    const response = await api.post('/predict', formData);\r\n    \r\n    if (!response.data) {\r\n      throw new Error('No data received from server');\r\n    }\r\n\r\n    // Calculate breakdown for the results\r\n    const breakdown = calculateBreakdown(formData, response.data.predicted_emissions);\r\n    \r\n    const results = {\r\n      predicted_emissions: response.data.predicted_emissions,\r\n      confidence_score: response.data.confidence_score,\r\n      recommendations: response.data.recommendations || [],\r\n      breakdown: breakdown,\r\n      input_data: formData,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    console.log('Results prepared:', results);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error submitting carbon data:', error);\r\n    \r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(`Server Error: ${error.response.status} - ${error.response.data?.message || error.response.statusText}`);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      throw new Error('Network Error: Unable to connect to server. Please check your internet connection.');\r\n    } else {\r\n      // Something else happened\r\n      throw new Error(`Request Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchModelDetails = async () => {\r\n  try {\r\n    const response = await api.get('/model-details');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.warn('Could not fetch model details:', error);\r\n    return {\r\n      model_type: 'Random Forest',\r\n      version: '1.0.0',\r\n      training_date: '2024-01-01'\r\n    };\r\n  }\r\n};\r\n\r\n// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\r\nconst calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total)\r\n  breakdown.transportation = Math.round((inputs.vehicle_monthly_distance_km / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_rate || 0.5;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  Object.keys(breakdown).forEach(key => {\r\n    breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n  });\r\n\r\n  return breakdown;\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}