{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8001';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('Making API request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log('API response received:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\nexport const submitCarbonData = async formData => {\n  try {\n    console.log('Submitting carbon data:', formData);\n\n    // Transform vehicles array into individual fields expected by backend\n    const transformedData = transformFormDataForBackend(formData);\n    console.log('Transformed data for backend:', transformedData);\n    const response = await api.post('/predict', transformedData);\n    if (!response.data) {\n      throw new Error('No data received from server');\n    }\n\n    // Calculate breakdown for the results\n    const breakdown = calculateBreakdown(formData, response.data.predicted_emissions);\n    const results = {\n      predicted_emissions: response.data.predicted_emissions,\n      confidence_score: response.data.confidence_score,\n      recommendations: response.data.recommendations || [],\n      breakdown: breakdown,\n      input_data: formData,\n      timestamp: new Date().toISOString()\n    };\n    console.log('Results prepared:', results);\n    return results;\n  } catch (error) {\n    console.error('Error submitting carbon data:', error);\n    if (error.response) {\n      var _error$response$data;\n      // Server responded with error status\n      throw new Error(`Server Error: ${error.response.status} - ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.response.statusText}`);\n    } else if (error.request) {\n      // Request was made but no response received\n      throw new Error('Network Error: Unable to connect to server. Please check your internet connection.');\n    } else {\n      // Something else happened\n      throw new Error(`Request Error: ${error.message}`);\n    }\n  }\n};\nexport const fetchModelDetails = async () => {\n  try {\n    const response = await api.get('/model-details');\n    return response.data;\n  } catch (error) {\n    console.warn('Could not fetch model details:', error);\n    return {\n      model_type: 'Random Forest',\n      version: '1.0.0',\n      training_date: '2024-01-01'\n    };\n  }\n};\n\n// Transform form data to match backend API expectations\nconst transformFormDataForBackend = formData => {\n  // Calculate total vehicle distance from vehicles array\n  let totalVehicleDistance = 0;\n  let vehicleType = 'none';\n  let vehiclesPerHousehold = 0;\n  if (formData.vehicles && formData.vehicles.length > 0) {\n    totalVehicleDistance = formData.vehicles.reduce((sum, vehicle) => sum + (vehicle.monthly_distance_km || 0), 0);\n    vehiclesPerHousehold = formData.vehicles.length;\n\n    // Use the first vehicle's type for primary vehicle field\n    const primaryVehicle = formData.vehicles[0];\n    vehicleType = primaryVehicle.type || 'none';\n  }\n\n  // Map meat consumption to string value expected by main.py API\n  const meatConsumptionMap = {\n    'vegetarian': 'None',\n    'occasional': 'Low',\n    'regular': 'High'\n  };\n\n  // Map shopping frequency to string value expected by main.py API\n  const shoppingFrequencyMap = {\n    'daily': 'Daily',\n    'weekly': 'Weekly',\n    'monthly': 'Monthly',\n    'rarely': 'Rarely'\n  };\n\n  // Map social activity to string value expected by main.py API\n  const socialActivityMap = {\n    'low': 'Low',\n    'medium': 'Medium',\n    'high': 'High'\n  };\n\n  // Map heating energy source to expected format\n  const heatingEnergyMap = {\n    'electric': 'Electric',\n    'gas': 'Natural Gas',\n    'solar': 'Solar',\n    'none': 'None'\n  };\n\n  // Map vehicle type to expected format\n  const vehicleTypeMap = {\n    'bicycle': 'Bicycle',\n    'motorcycle': 'Motorcycle',\n    'scooter': 'Scooter',\n    'car_small': 'Gasoline',\n    'car_medium': 'Gasoline',\n    'car_large': 'Gasoline',\n    'auto_rickshaw': 'Gasoline',\n    'bus': 'Gasoline',\n    'train': 'Electric',\n    'metro': 'Electric',\n    'taxi': 'Gasoline',\n    'walking': 'None',\n    'none': 'None'\n  };\n\n  // Map climate zone to expected format\n  const climateZoneMap = {\n    'tropical': 'Hot',\n    'temperate': 'Moderate',\n    'arid': 'Hot',\n    'coastal': 'Moderate'\n  };\n  return {\n    household_size: formData.household_size || 1,\n    electricity_usage_kwh: formData.electricity_usage_kwh || 0,\n    home_size_sqft: formData.home_size_sqft || 0,\n    heating_energy_source: heatingEnergyMap[formData.heating_energy_source] || 'Electric',\n    vehicle_type: vehicleTypeMap[vehicleType] || 'Gasoline',\n    climate_zone: climateZoneMap[formData.climate_zone] || 'Moderate',\n    meat_consumption: meatConsumptionMap[formData.meat_consumption] || 'Medium',\n    shopping_frequency: shoppingFrequencyMap[formData.shopping_frequency] || 'Weekly',\n    social_activity: socialActivityMap[formData.social_activity] || 'Medium',\n    vehicle_monthly_distance_km: totalVehicleDistance,\n    heating_efficiency: formData.heating_efficiency || 0.5,\n    cooling_efficiency: formData.cooling_efficiency || 0.5,\n    heating_days: formData.heating_days || 120,\n    cooling_days: formData.cooling_days || 90,\n    waste_bag_weekly_count: formData.waste_bag_weekly_count || 2,\n    new_clothes_monthly: formData.new_clothes_monthly || 2,\n    vehicles_per_household: vehiclesPerHousehold,\n    monthly_grocery_bill: formData.monthly_grocery_bill || 300.0\n  };\n};\n\n// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\nconst calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round(inputs.electricity_usage_kwh / 1000 * 35);\n\n  // Transportation (25-30% of total) - calculate from vehicles array\n  let totalVehicleDistance = 0;\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => sum + (vehicle.monthly_distance_km || 0), 0);\n  }\n  breakdown.transportation = Math.round(totalVehicleDistance / 1000 * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  if (total > 0) {\n    Object.keys(breakdown).forEach(key => {\n      breakdown[key] = Math.round(breakdown[key] / total * 100);\n    });\n  }\n  return breakdown;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$response","_error$response2","submitCarbonData","formData","transformedData","transformFormDataForBackend","post","Error","breakdown","calculateBreakdown","predicted_emissions","results","confidence_score","recommendations","input_data","timestamp","Date","toISOString","_error$response$data","message","statusText","fetchModelDetails","get","warn","model_type","version","training_date","totalVehicleDistance","vehicleType","vehiclesPerHousehold","vehicles","length","reduce","sum","vehicle","monthly_distance_km","primaryVehicle","type","meatConsumptionMap","shoppingFrequencyMap","socialActivityMap","heatingEnergyMap","vehicleTypeMap","climateZoneMap","household_size","electricity_usage_kwh","home_size_sqft","heating_energy_source","vehicle_type","climate_zone","meat_consumption","shopping_frequency","social_activity","vehicle_monthly_distance_km","heating_efficiency","cooling_efficiency","heating_days","cooling_days","waste_bag_weekly_count","new_clothes_monthly","vehicles_per_household","monthly_grocery_bill","inputs","totalFootprint","electricity","transportation","heating","waste","lifestyle","Math","round","heatingEfficiency","recyclingRate","recycling_practice","renewable_energy_percentage","total","Object","values","a","b","keys","forEach","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8001';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    console.log('Making API request:', config.method?.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    console.log('API response received:', response.status, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('API error:', error.response?.status, error.response?.data);\n    return Promise.reject(error);\n  }\n);\n\nexport const submitCarbonData = async (formData) => {\n  try {\n    console.log('Submitting carbon data:', formData);\n    \n    // Transform vehicles array into individual fields expected by backend\n    const transformedData = transformFormDataForBackend(formData);\n    console.log('Transformed data for backend:', transformedData);\n    \n    const response = await api.post('/predict', transformedData);\n    \n    if (!response.data) {\n      throw new Error('No data received from server');\n    }\n\n    // Calculate breakdown for the results\n    const breakdown = calculateBreakdown(formData, response.data.predicted_emissions);\n    \n    const results = {\n      predicted_emissions: response.data.predicted_emissions,\n      confidence_score: response.data.confidence_score,\n      recommendations: response.data.recommendations || [],\n      breakdown: breakdown,\n      input_data: formData,\n      timestamp: new Date().toISOString()\n    };\n\n    console.log('Results prepared:', results);\n    return results;\n  } catch (error) {\n    console.error('Error submitting carbon data:', error);\n    \n    if (error.response) {\n      // Server responded with error status\n      throw new Error(`Server Error: ${error.response.status} - ${error.response.data?.message || error.response.statusText}`);\n    } else if (error.request) {\n      // Request was made but no response received\n      throw new Error('Network Error: Unable to connect to server. Please check your internet connection.');\n    } else {\n      // Something else happened\n      throw new Error(`Request Error: ${error.message}`);\n    }\n  }\n};\n\nexport const fetchModelDetails = async () => {\n  try {\n    const response = await api.get('/model-details');\n    return response.data;\n  } catch (error) {\n    console.warn('Could not fetch model details:', error);\n    return {\n      model_type: 'Random Forest',\n      version: '1.0.0',\n      training_date: '2024-01-01'\n    };\n  }\n};\n\n// Transform form data to match backend API expectations\nconst transformFormDataForBackend = (formData) => {\n  // Calculate total vehicle distance from vehicles array\n  let totalVehicleDistance = 0;\n  let vehicleType = 'none';\n  let vehiclesPerHousehold = 0;\n  \n  if (formData.vehicles && formData.vehicles.length > 0) {\n    totalVehicleDistance = formData.vehicles.reduce((sum, vehicle) => \n      sum + (vehicle.monthly_distance_km || 0), 0\n    );\n    vehiclesPerHousehold = formData.vehicles.length;\n    \n    // Use the first vehicle's type for primary vehicle field\n    const primaryVehicle = formData.vehicles[0];\n    vehicleType = primaryVehicle.type || 'none';\n  }\n\n  // Map meat consumption to string value expected by main.py API\n  const meatConsumptionMap = {\n    'vegetarian': 'None',\n    'occasional': 'Low',\n    'regular': 'High'\n  };\n\n  // Map shopping frequency to string value expected by main.py API\n  const shoppingFrequencyMap = {\n    'daily': 'Daily',\n    'weekly': 'Weekly',\n    'monthly': 'Monthly',\n    'rarely': 'Rarely'\n  };\n\n  // Map social activity to string value expected by main.py API\n  const socialActivityMap = {\n    'low': 'Low',\n    'medium': 'Medium',\n    'high': 'High'\n  };\n\n  // Map heating energy source to expected format\n  const heatingEnergyMap = {\n    'electric': 'Electric',\n    'gas': 'Natural Gas',\n    'solar': 'Solar',\n    'none': 'None'\n  };\n\n  // Map vehicle type to expected format\n  const vehicleTypeMap = {\n    'bicycle': 'Bicycle',\n    'motorcycle': 'Motorcycle',\n    'scooter': 'Scooter',\n    'car_small': 'Gasoline',\n    'car_medium': 'Gasoline',\n    'car_large': 'Gasoline',\n    'auto_rickshaw': 'Gasoline',\n    'bus': 'Gasoline',\n    'train': 'Electric',\n    'metro': 'Electric',\n    'taxi': 'Gasoline',\n    'walking': 'None',\n    'none': 'None'\n  };\n\n  // Map climate zone to expected format\n  const climateZoneMap = {\n    'tropical': 'Hot',\n    'temperate': 'Moderate',\n    'arid': 'Hot',\n    'coastal': 'Moderate'\n  };\n\n  return {\n    household_size: formData.household_size || 1,\n    electricity_usage_kwh: formData.electricity_usage_kwh || 0,\n    home_size_sqft: formData.home_size_sqft || 0,\n    heating_energy_source: heatingEnergyMap[formData.heating_energy_source] || 'Electric',\n    vehicle_type: vehicleTypeMap[vehicleType] || 'Gasoline',\n    climate_zone: climateZoneMap[formData.climate_zone] || 'Moderate',\n    meat_consumption: meatConsumptionMap[formData.meat_consumption] || 'Medium',\n    shopping_frequency: shoppingFrequencyMap[formData.shopping_frequency] || 'Weekly',\n    social_activity: socialActivityMap[formData.social_activity] || 'Medium',\n    vehicle_monthly_distance_km: totalVehicleDistance,\n    heating_efficiency: formData.heating_efficiency || 0.5,\n    cooling_efficiency: formData.cooling_efficiency || 0.5,\n    heating_days: formData.heating_days || 120,\n    cooling_days: formData.cooling_days || 90,\n    waste_bag_weekly_count: formData.waste_bag_weekly_count || 2,\n    new_clothes_monthly: formData.new_clothes_monthly || 2,\n    vehicles_per_household: vehiclesPerHousehold,\n    monthly_grocery_bill: formData.monthly_grocery_bill || 300.0\n  };\n};\n\n// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\nconst calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\n\n  // Transportation (25-30% of total) - calculate from vehicles array\n  let totalVehicleDistance = 0;\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => \n      sum + (vehicle.monthly_distance_km || 0), 0\n    );\n  }\n  breakdown.transportation = Math.round((totalVehicleDistance / 1000) * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : \n                       inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  if (total > 0) {\n    Object.keys(breakdown).forEach(key => {\n      breakdown[key] = Math.round((breakdown[key] / total) * 100);\n    });\n  }\n\n  return breakdown;\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}