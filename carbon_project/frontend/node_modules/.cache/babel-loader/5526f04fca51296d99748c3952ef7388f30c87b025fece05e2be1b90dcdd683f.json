{"ast":null,"code":"export const calculateProgress = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'walking_cycling_distance_km', 'public_transport_usage', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const filledFields = requiredFields.filter(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n\n  // Check if vehicles array has at least one vehicle with required fields\n  // Allow vehicles with default values to pass validation for progress calculation\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && formData.vehicles.some(vehicle => vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined && vehicle.monthly_distance_km > 0);\n  const vehicleFieldsCount = hasValidVehicles ? 1 : 0;\n  const totalFields = requiredFields.length + 1; // +1 for vehicles\n\n  return (filledFields.length + vehicleFieldsCount) / totalFields * 100;\n};\nexport const validateForm = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'walking_cycling_distance_km', 'public_transport_usage', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const basicFieldsValid = requiredFields.every(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n\n  // Check if vehicles array has at least one vehicle with required fields\n  // For form validation, require at least one properly filled vehicle\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && formData.vehicles.some(vehicle => vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined && vehicle.monthly_distance_km > 0);\n  return basicFieldsValid && hasValidVehicles;\n};\nexport const getValidationErrors = formData => {\n  const fieldLabels = {\n    'household_size': 'Household Size',\n    'home_size_sqft': 'Home Size (sq ft)',\n    'home_type': 'Home Type',\n    'home_age': 'Home Age (years)',\n    'electricity_usage_kwh': 'Monthly Electricity Usage (kWh)',\n    'heating_energy_source': 'Heating Energy Source',\n    'cooling_energy_source': 'Cooling Energy Source',\n    'walking_cycling_distance_km': 'Monthly Walking/Cycling Distance (km)',\n    'public_transport_usage': 'Public Transport Usage',\n    'climate_zone': 'Climate Zone',\n    'meat_consumption': 'Meat Consumption',\n    'air_travel_hours': 'Air Travel Hours per Year',\n    'cooking_method': 'Cooking Method',\n    'monthly_grocery_bill': 'Monthly Grocery Bill (â‚¹)',\n    'waste_per_person': 'Waste per Person (kg/week)',\n    'recycling_practice': 'Recycling Practice',\n    'income_level': 'Income Level',\n    'location_type': 'Location Type'\n  };\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'walking_cycling_distance_km', 'public_transport_usage', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const errors = [];\n  requiredFields.forEach(field => {\n    const value = formData[field];\n    if (value === undefined || value === null || value === '') {\n      errors.push({\n        field: field,\n        label: fieldLabels[field] || field,\n        message: `${fieldLabels[field] || field} is required`\n      });\n    }\n  });\n\n  // Check vehicles validation - only validate vehicles that have been modified from defaults\n  if (!formData.vehicles || formData.vehicles.length === 0) {\n    errors.push({\n      field: 'vehicles',\n      label: 'Vehicle Information',\n      message: 'At least one vehicle is required'\n    });\n  } else {\n    // Check if at least one vehicle is properly filled\n    const hasValidVehicle = formData.vehicles.some(vehicle => vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined && vehicle.monthly_distance_km > 0);\n    if (!hasValidVehicle) {\n      errors.push({\n        field: 'vehicles',\n        label: 'Vehicle Information',\n        message: 'At least one vehicle must be properly filled with type, fuel, and distance'\n      });\n    }\n\n    // Only validate individual vehicles if they have been partially filled\n    formData.vehicles.forEach((vehicle, index) => {\n      const hasAnyData = vehicle.type || vehicle.fuel_type || vehicle.monthly_distance_km !== undefined && vehicle.monthly_distance_km !== 100;\n      if (hasAnyData) {\n        if (!vehicle.type) {\n          errors.push({\n            field: `vehicles[${index}].type`,\n            label: `Vehicle ${index + 1} Type`,\n            message: `Vehicle ${index + 1} type is required`\n          });\n        }\n        if (!vehicle.fuel_type) {\n          errors.push({\n            field: `vehicles[${index}].fuel_type`,\n            label: `Vehicle ${index + 1} Fuel Type`,\n            message: `Vehicle ${index + 1} fuel type is required`\n          });\n        }\n        if (vehicle.monthly_distance_km === undefined || vehicle.monthly_distance_km === null || vehicle.monthly_distance_km === '' || vehicle.monthly_distance_km <= 0) {\n          errors.push({\n            field: `vehicles[${index}].monthly_distance_km`,\n            label: `Vehicle ${index + 1} Monthly Distance (km)`,\n            message: `Vehicle ${index + 1} monthly distance must be greater than 0`\n          });\n        }\n      }\n    });\n  }\n  return errors;\n};\nexport const getFieldValidation = (field, value) => {\n  const validations = {\n    'household_size': val => val >= 1 && val <= 15,\n    'home_size_sqft': val => val >= 200 && val <= 5000,\n    'home_age': val => val >= 0 && val <= 50,\n    'electricity_usage_kwh': val => val >= 50 && val <= 2000,\n    'walking_cycling_distance_km': val => val >= 0 && val <= 500,\n    'air_travel_hours': val => val >= 0 && val <= 100,\n    'monthly_grocery_bill': val => val >= 2000 && val <= 50000,\n    'waste_per_person': val => val >= 1 && val <= 5\n  };\n  if (validations[field]) {\n    return validations[field](value);\n  }\n  return value !== undefined && value !== null && value !== '';\n};\nexport const calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round(inputs.electricity_usage_kwh / 1000 * 35);\n\n  // Transportation (25-30% of total) - calculate from vehicles array\n  let totalVehicleDistance = 0;\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => sum + (vehicle.monthly_distance_km || 0), 0);\n  }\n  breakdown.transportation = Math.round(totalVehicleDistance / 1000 * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  if (total > 0) {\n    Object.keys(breakdown).forEach(key => {\n      breakdown[key] = Math.round(breakdown[key] / total * 100);\n    });\n  }\n  return breakdown;\n};","map":{"version":3,"names":["calculateProgress","formData","requiredFields","filledFields","filter","field","value","undefined","hasValidVehicles","vehicles","length","some","vehicle","type","fuel_type","monthly_distance_km","vehicleFieldsCount","totalFields","validateForm","basicFieldsValid","every","getValidationErrors","fieldLabels","errors","forEach","push","label","message","hasValidVehicle","index","hasAnyData","getFieldValidation","validations","val","calculateBreakdown","inputs","totalFootprint","breakdown","electricity","transportation","heating","waste","lifestyle","Math","round","electricity_usage_kwh","totalVehicleDistance","reduce","sum","heatingEfficiency","heating_efficiency","recyclingRate","recycling_practice","renewable_energy_percentage","total","Object","values","a","b","keys","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/utils/formUtils.js"],"sourcesContent":["export const calculateProgress = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const filledFields = requiredFields.filter(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  // Check if vehicles array has at least one vehicle with required fields\r\n  // Allow vehicles with default values to pass validation for progress calculation\r\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && \r\n    formData.vehicles.some(vehicle => \r\n      vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined &&\r\n      vehicle.monthly_distance_km > 0\r\n    );\r\n\r\n  const vehicleFieldsCount = hasValidVehicles ? 1 : 0;\r\n  const totalFields = requiredFields.length + 1; // +1 for vehicles\r\n\r\n  return ((filledFields.length + vehicleFieldsCount) / totalFields) * 100;\r\n};\r\n\r\nexport const validateForm = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const basicFieldsValid = requiredFields.every(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  // Check if vehicles array has at least one vehicle with required fields\r\n  // For form validation, require at least one properly filled vehicle\r\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && \r\n    formData.vehicles.some(vehicle => \r\n      vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined &&\r\n      vehicle.monthly_distance_km > 0\r\n    );\r\n\r\n  return basicFieldsValid && hasValidVehicles;\r\n};\r\n\r\nexport const getValidationErrors = (formData) => {\r\n  const fieldLabels = {\r\n    'household_size': 'Household Size',\r\n    'home_size_sqft': 'Home Size (sq ft)',\r\n    'home_type': 'Home Type',\r\n    'home_age': 'Home Age (years)',\r\n    'electricity_usage_kwh': 'Monthly Electricity Usage (kWh)',\r\n    'heating_energy_source': 'Heating Energy Source',\r\n    'cooling_energy_source': 'Cooling Energy Source',\r\n    'walking_cycling_distance_km': 'Monthly Walking/Cycling Distance (km)',\r\n    'public_transport_usage': 'Public Transport Usage',\r\n    'climate_zone': 'Climate Zone',\r\n    'meat_consumption': 'Meat Consumption',\r\n    'air_travel_hours': 'Air Travel Hours per Year',\r\n    'cooking_method': 'Cooking Method',\r\n    'monthly_grocery_bill': 'Monthly Grocery Bill (â‚¹)',\r\n    'waste_per_person': 'Waste per Person (kg/week)',\r\n    'recycling_practice': 'Recycling Practice',\r\n    'income_level': 'Income Level',\r\n    'location_type': 'Location Type'\r\n  };\r\n\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const errors = [];\r\n  \r\n  requiredFields.forEach(field => {\r\n    const value = formData[field];\r\n    if (value === undefined || value === null || value === '') {\r\n      errors.push({\r\n        field: field,\r\n        label: fieldLabels[field] || field,\r\n        message: `${fieldLabels[field] || field} is required`\r\n      });\r\n    }\r\n  });\r\n\r\n  // Check vehicles validation - only validate vehicles that have been modified from defaults\r\n  if (!formData.vehicles || formData.vehicles.length === 0) {\r\n    errors.push({\r\n      field: 'vehicles',\r\n      label: 'Vehicle Information',\r\n      message: 'At least one vehicle is required'\r\n    });\r\n  } else {\r\n    // Check if at least one vehicle is properly filled\r\n    const hasValidVehicle = formData.vehicles.some(vehicle => \r\n      vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined &&\r\n      vehicle.monthly_distance_km > 0\r\n    );\r\n    \r\n    if (!hasValidVehicle) {\r\n      errors.push({\r\n        field: 'vehicles',\r\n        label: 'Vehicle Information',\r\n        message: 'At least one vehicle must be properly filled with type, fuel, and distance'\r\n      });\r\n    }\r\n    \r\n    // Only validate individual vehicles if they have been partially filled\r\n    formData.vehicles.forEach((vehicle, index) => {\r\n      const hasAnyData = vehicle.type || vehicle.fuel_type || (vehicle.monthly_distance_km !== undefined && vehicle.monthly_distance_km !== 100);\r\n      \r\n      if (hasAnyData) {\r\n        if (!vehicle.type) {\r\n          errors.push({\r\n            field: `vehicles[${index}].type`,\r\n            label: `Vehicle ${index + 1} Type`,\r\n            message: `Vehicle ${index + 1} type is required`\r\n          });\r\n        }\r\n        if (!vehicle.fuel_type) {\r\n          errors.push({\r\n            field: `vehicles[${index}].fuel_type`,\r\n            label: `Vehicle ${index + 1} Fuel Type`,\r\n            message: `Vehicle ${index + 1} fuel type is required`\r\n          });\r\n        }\r\n        if (vehicle.monthly_distance_km === undefined || vehicle.monthly_distance_km === null || vehicle.monthly_distance_km === '' || vehicle.monthly_distance_km <= 0) {\r\n          errors.push({\r\n            field: `vehicles[${index}].monthly_distance_km`,\r\n            label: `Vehicle ${index + 1} Monthly Distance (km)`,\r\n            message: `Vehicle ${index + 1} monthly distance must be greater than 0`\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const getFieldValidation = (field, value) => {\r\n  const validations = {\r\n    'household_size': (val) => val >= 1 && val <= 15,\r\n    'home_size_sqft': (val) => val >= 200 && val <= 5000,\r\n    'home_age': (val) => val >= 0 && val <= 50,\r\n    'electricity_usage_kwh': (val) => val >= 50 && val <= 2000,\r\n    'walking_cycling_distance_km': (val) => val >= 0 && val <= 500,\r\n    'air_travel_hours': (val) => val >= 0 && val <= 100,\r\n    'monthly_grocery_bill': (val) => val >= 2000 && val <= 50000,\r\n    'waste_per_person': (val) => val >= 1 && val <= 5\r\n  };\r\n\r\n  if (validations[field]) {\r\n    return validations[field](value);\r\n  }\r\n  \r\n  return value !== undefined && value !== null && value !== '';\r\n};\r\n\r\nexport const calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total) - calculate from vehicles array\r\n  let totalVehicleDistance = 0;\r\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\r\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => \r\n      sum + (vehicle.monthly_distance_km || 0), 0\r\n    );\r\n  }\r\n  breakdown.transportation = Math.round((totalVehicleDistance / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : \r\n                       inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  if (total > 0) {\r\n    Object.keys(breakdown).forEach(key => {\r\n      breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n    });\r\n  }\r\n\r\n  return breakdown;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}