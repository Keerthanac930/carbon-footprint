{"ast":null,"code":"export const calculateProgress=formData=>{const requiredFields=['household_size','home_size_sqft','home_type','home_age','electricity_usage_kwh','heating_energy_source','cooling_energy_source','walking_cycling_distance_km','public_transport_usage','climate_zone','meat_consumption','air_travel_hours','cooking_method','monthly_grocery_bill','waste_per_person','recycling_practice','income_level','location_type'];const filledFields=requiredFields.filter(field=>{const value=formData[field];return value!==undefined&&value!==null&&value!=='';});// Check if vehicles array has at least one vehicle with required fields\nconst hasValidVehicles=formData.vehicles&&formData.vehicles.length>0&&formData.vehicles.every(vehicle=>vehicle.type&&vehicle.fuel_type&&vehicle.monthly_distance_km!==undefined);const vehicleFieldsCount=hasValidVehicles?1:0;const totalFields=requiredFields.length+1;// +1 for vehicles\nreturn(filledFields.length+vehicleFieldsCount)/totalFields*100;};export const validateForm=formData=>{const requiredFields=['household_size','home_size_sqft','home_type','home_age','electricity_usage_kwh','heating_energy_source','cooling_energy_source','walking_cycling_distance_km','public_transport_usage','climate_zone','meat_consumption','air_travel_hours','cooking_method','monthly_grocery_bill','waste_per_person','recycling_practice','income_level','location_type'];const basicFieldsValid=requiredFields.every(field=>{const value=formData[field];return value!==undefined&&value!==null&&value!=='';});// Check if vehicles array has at least one vehicle with required fields\nconst hasValidVehicles=formData.vehicles&&formData.vehicles.length>0&&formData.vehicles.every(vehicle=>vehicle.type&&vehicle.fuel_type&&vehicle.monthly_distance_km!==undefined);return basicFieldsValid&&hasValidVehicles;};export const getValidationErrors=formData=>{const fieldLabels={'household_size':'Household Size','home_size_sqft':'Home Size (sq ft)','home_type':'Home Type','home_age':'Home Age (years)','electricity_usage_kwh':'Monthly Electricity Usage (kWh)','heating_energy_source':'Heating Energy Source','cooling_energy_source':'Cooling Energy Source','walking_cycling_distance_km':'Monthly Walking/Cycling Distance (km)','public_transport_usage':'Public Transport Usage','climate_zone':'Climate Zone','meat_consumption':'Meat Consumption','air_travel_hours':'Air Travel Hours per Year','cooking_method':'Cooking Method','monthly_grocery_bill':'Monthly Grocery Bill (₹)','waste_per_person':'Waste per Person (kg/week)','recycling_practice':'Recycling Practice','income_level':'Income Level','location_type':'Location Type'};const requiredFields=['household_size','home_size_sqft','home_type','home_age','electricity_usage_kwh','heating_energy_source','cooling_energy_source','walking_cycling_distance_km','public_transport_usage','climate_zone','meat_consumption','air_travel_hours','cooking_method','monthly_grocery_bill','waste_per_person','recycling_practice','income_level','location_type'];const errors=[];requiredFields.forEach(field=>{const value=formData[field];if(value===undefined||value===null||value===''){errors.push({field:field,label:fieldLabels[field]||field,message:\"\".concat(fieldLabels[field]||field,\" is required\")});}});// Check vehicles validation\nif(!formData.vehicles||formData.vehicles.length===0){errors.push({field:'vehicles',label:'Vehicle Information',message:'At least one vehicle is required'});}else{formData.vehicles.forEach((vehicle,index)=>{if(!vehicle.type){errors.push({field:\"vehicles[\".concat(index,\"].type\"),label:\"Vehicle \".concat(index+1,\" Type\"),message:\"Vehicle \".concat(index+1,\" type is required\")});}if(!vehicle.fuel_type){errors.push({field:\"vehicles[\".concat(index,\"].fuel_type\"),label:\"Vehicle \".concat(index+1,\" Fuel Type\"),message:\"Vehicle \".concat(index+1,\" fuel type is required\")});}if(vehicle.monthly_distance_km===undefined||vehicle.monthly_distance_km===null||vehicle.monthly_distance_km===''){errors.push({field:\"vehicles[\".concat(index,\"].monthly_distance_km\"),label:\"Vehicle \".concat(index+1,\" Monthly Distance (km)\"),message:\"Vehicle \".concat(index+1,\" monthly distance is required\")});}});}return errors;};export const getFieldValidation=(field,value)=>{const validations={'household_size':val=>val>=1&&val<=15,'home_size_sqft':val=>val>=200&&val<=5000,'home_age':val=>val>=0&&val<=50,'electricity_usage_kwh':val=>val>=50&&val<=2000,'walking_cycling_distance_km':val=>val>=0&&val<=500,'air_travel_hours':val=>val>=0&&val<=100,'monthly_grocery_bill':val=>val>=2000&&val<=50000,'waste_per_person':val=>val>=1&&val<=5};if(validations[field]){return validations[field](value);}return value!==undefined&&value!==null&&value!=='';};export const calculateBreakdown=(inputs,totalFootprint)=>{const breakdown={electricity:0,transportation:0,heating:0,waste:0,lifestyle:0};// Electricity (35-40% of total)\nbreakdown.electricity=Math.round(inputs.electricity_usage_kwh/1000*35);// Transportation (25-30% of total) - calculate from vehicles array\nlet totalVehicleDistance=0;if(inputs.vehicles&&inputs.vehicles.length>0){totalVehicleDistance=inputs.vehicles.reduce((sum,vehicle)=>sum+(vehicle.monthly_distance_km||0),0);}breakdown.transportation=Math.round(totalVehicleDistance/1000*25);// Heating (20-25% of total)\nconst heatingEfficiency=inputs.heating_efficiency||0.8;breakdown.heating=Math.round((1-heatingEfficiency)*25);// Waste (10-15% of total)\nconst recyclingRate=inputs.recycling_practice==='yes'?0.8:inputs.recycling_practice==='sometimes'?0.4:0.1;breakdown.waste=Math.round((1-recyclingRate)*15);// Lifestyle (5-10% of total)\nbreakdown.lifestyle=Math.round(10-(inputs.renewable_energy_percentage||0)*10);// Normalize to total 100%\nconst total=Object.values(breakdown).reduce((a,b)=>a+b,0);if(total>0){Object.keys(breakdown).forEach(key=>{breakdown[key]=Math.round(breakdown[key]/total*100);});}return breakdown;};","map":{"version":3,"names":["calculateProgress","formData","requiredFields","filledFields","filter","field","value","undefined","hasValidVehicles","vehicles","length","every","vehicle","type","fuel_type","monthly_distance_km","vehicleFieldsCount","totalFields","validateForm","basicFieldsValid","getValidationErrors","fieldLabels","errors","forEach","push","label","message","concat","index","getFieldValidation","validations","val","calculateBreakdown","inputs","totalFootprint","breakdown","electricity","transportation","heating","waste","lifestyle","Math","round","electricity_usage_kwh","totalVehicleDistance","reduce","sum","heatingEfficiency","heating_efficiency","recyclingRate","recycling_practice","renewable_energy_percentage","total","Object","values","a","b","keys","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/utils/formUtils.js"],"sourcesContent":["export const calculateProgress = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const filledFields = requiredFields.filter(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  // Check if vehicles array has at least one vehicle with required fields\r\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && \r\n    formData.vehicles.every(vehicle => \r\n      vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined\r\n    );\r\n\r\n  const vehicleFieldsCount = hasValidVehicles ? 1 : 0;\r\n  const totalFields = requiredFields.length + 1; // +1 for vehicles\r\n\r\n  return ((filledFields.length + vehicleFieldsCount) / totalFields) * 100;\r\n};\r\n\r\nexport const validateForm = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const basicFieldsValid = requiredFields.every(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  // Check if vehicles array has at least one vehicle with required fields\r\n  const hasValidVehicles = formData.vehicles && formData.vehicles.length > 0 && \r\n    formData.vehicles.every(vehicle => \r\n      vehicle.type && vehicle.fuel_type && vehicle.monthly_distance_km !== undefined\r\n    );\r\n\r\n  return basicFieldsValid && hasValidVehicles;\r\n};\r\n\r\nexport const getValidationErrors = (formData) => {\r\n  const fieldLabels = {\r\n    'household_size': 'Household Size',\r\n    'home_size_sqft': 'Home Size (sq ft)',\r\n    'home_type': 'Home Type',\r\n    'home_age': 'Home Age (years)',\r\n    'electricity_usage_kwh': 'Monthly Electricity Usage (kWh)',\r\n    'heating_energy_source': 'Heating Energy Source',\r\n    'cooling_energy_source': 'Cooling Energy Source',\r\n    'walking_cycling_distance_km': 'Monthly Walking/Cycling Distance (km)',\r\n    'public_transport_usage': 'Public Transport Usage',\r\n    'climate_zone': 'Climate Zone',\r\n    'meat_consumption': 'Meat Consumption',\r\n    'air_travel_hours': 'Air Travel Hours per Year',\r\n    'cooking_method': 'Cooking Method',\r\n    'monthly_grocery_bill': 'Monthly Grocery Bill (₹)',\r\n    'waste_per_person': 'Waste per Person (kg/week)',\r\n    'recycling_practice': 'Recycling Practice',\r\n    'income_level': 'Income Level',\r\n    'location_type': 'Location Type'\r\n  };\r\n\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'walking_cycling_distance_km', 'public_transport_usage',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const errors = [];\r\n  \r\n  requiredFields.forEach(field => {\r\n    const value = formData[field];\r\n    if (value === undefined || value === null || value === '') {\r\n      errors.push({\r\n        field: field,\r\n        label: fieldLabels[field] || field,\r\n        message: `${fieldLabels[field] || field} is required`\r\n      });\r\n    }\r\n  });\r\n\r\n  // Check vehicles validation\r\n  if (!formData.vehicles || formData.vehicles.length === 0) {\r\n    errors.push({\r\n      field: 'vehicles',\r\n      label: 'Vehicle Information',\r\n      message: 'At least one vehicle is required'\r\n    });\r\n  } else {\r\n    formData.vehicles.forEach((vehicle, index) => {\r\n      if (!vehicle.type) {\r\n        errors.push({\r\n          field: `vehicles[${index}].type`,\r\n          label: `Vehicle ${index + 1} Type`,\r\n          message: `Vehicle ${index + 1} type is required`\r\n        });\r\n      }\r\n      if (!vehicle.fuel_type) {\r\n        errors.push({\r\n          field: `vehicles[${index}].fuel_type`,\r\n          label: `Vehicle ${index + 1} Fuel Type`,\r\n          message: `Vehicle ${index + 1} fuel type is required`\r\n        });\r\n      }\r\n      if (vehicle.monthly_distance_km === undefined || vehicle.monthly_distance_km === null || vehicle.monthly_distance_km === '') {\r\n        errors.push({\r\n          field: `vehicles[${index}].monthly_distance_km`,\r\n          label: `Vehicle ${index + 1} Monthly Distance (km)`,\r\n          message: `Vehicle ${index + 1} monthly distance is required`\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const getFieldValidation = (field, value) => {\r\n  const validations = {\r\n    'household_size': (val) => val >= 1 && val <= 15,\r\n    'home_size_sqft': (val) => val >= 200 && val <= 5000,\r\n    'home_age': (val) => val >= 0 && val <= 50,\r\n    'electricity_usage_kwh': (val) => val >= 50 && val <= 2000,\r\n    'walking_cycling_distance_km': (val) => val >= 0 && val <= 500,\r\n    'air_travel_hours': (val) => val >= 0 && val <= 100,\r\n    'monthly_grocery_bill': (val) => val >= 2000 && val <= 50000,\r\n    'waste_per_person': (val) => val >= 1 && val <= 5\r\n  };\r\n\r\n  if (validations[field]) {\r\n    return validations[field](value);\r\n  }\r\n  \r\n  return value !== undefined && value !== null && value !== '';\r\n};\r\n\r\nexport const calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total) - calculate from vehicles array\r\n  let totalVehicleDistance = 0;\r\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\r\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => \r\n      sum + (vehicle.monthly_distance_km || 0), 0\r\n    );\r\n  }\r\n  breakdown.transportation = Math.round((totalVehicleDistance / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : \r\n                       inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  if (total > 0) {\r\n    Object.keys(breakdown).forEach(key => {\r\n      breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n    });\r\n  }\r\n\r\n  return breakdown;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}