{"ast":null,"code":"export const calculateProgress = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const filledFields = requiredFields.filter(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n  return filledFields.length / requiredFields.length * 100;\n};\nexport const validateForm = formData => {\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  return requiredFields.every(field => {\n    const value = formData[field];\n    return value !== undefined && value !== null && value !== '';\n  });\n};\nexport const getValidationErrors = formData => {\n  const fieldLabels = {\n    'household_size': 'Household Size',\n    'home_size_sqft': 'Home Size (sq ft)',\n    'home_type': 'Home Type',\n    'home_age': 'Home Age (years)',\n    'electricity_usage_kwh': 'Monthly Electricity Usage (kWh)',\n    'heating_energy_source': 'Heating Energy Source',\n    'cooling_energy_source': 'Cooling Energy Source',\n    'vehicle_monthly_distance_km': 'Monthly Vehicle Distance (km)',\n    'vehicle_type': 'Vehicle Type',\n    'fuel_type': 'Fuel Type',\n    'vehicles_per_household': 'Vehicles per Household',\n    'climate_zone': 'Climate Zone',\n    'meat_consumption': 'Meat Consumption',\n    'air_travel_hours': 'Air Travel Hours per Year',\n    'cooking_method': 'Cooking Method',\n    'monthly_grocery_bill': 'Monthly Grocery Bill (₹)',\n    'waste_per_person': 'Waste per Person (kg/week)',\n    'recycling_practice': 'Recycling Practice',\n    'income_level': 'Income Level',\n    'location_type': 'Location Type'\n  };\n  const requiredFields = ['household_size', 'home_size_sqft', 'home_type', 'home_age', 'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source', 'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household', 'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method', 'monthly_grocery_bill', 'waste_per_person', 'recycling_practice', 'income_level', 'location_type'];\n  const errors = [];\n  requiredFields.forEach(field => {\n    const value = formData[field];\n    if (value === undefined || value === null || value === '') {\n      errors.push({\n        field: field,\n        label: fieldLabels[field] || field,\n        message: `${fieldLabels[field] || field} is required`\n      });\n    }\n  });\n  return errors;\n};\nexport const getFieldValidation = (field, value) => {\n  const validations = {\n    'household_size': val => val >= 1 && val <= 15,\n    'home_size_sqft': val => val >= 200 && val <= 5000,\n    'home_age': val => val >= 0 && val <= 50,\n    'electricity_usage_kwh': val => val >= 50 && val <= 2000,\n    'vehicle_monthly_distance_km': val => val >= 0 && val <= 3000,\n    'vehicles_per_household': val => val >= 0 && val <= 3,\n    'air_travel_hours': val => val >= 0 && val <= 100,\n    'monthly_grocery_bill': val => val >= 2000 && val <= 50000,\n    'waste_per_person': val => val >= 1 && val <= 5\n  };\n  if (validations[field]) {\n    return validations[field](value);\n  }\n  return value !== undefined && value !== null && value !== '';\n};\nexport const calculateBreakdown = (inputs, totalFootprint) => {\n  const breakdown = {\n    electricity: 0,\n    transportation: 0,\n    heating: 0,\n    waste: 0,\n    lifestyle: 0\n  };\n\n  // Electricity (35-40% of total)\n  breakdown.electricity = Math.round(inputs.electricity_usage_kwh / 1000 * 35);\n\n  // Transportation (25-30% of total)\n  breakdown.transportation = Math.round(inputs.vehicle_monthly_distance_km / 1000 * 25);\n\n  // Heating (20-25% of total)\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\n\n  // Waste (10-15% of total)\n  const recyclingRate = inputs.recycling_rate || 0.5;\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\n\n  // Lifestyle (5-10% of total)\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\n\n  // Normalize to total 100%\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\n  Object.keys(breakdown).forEach(key => {\n    breakdown[key] = Math.round(breakdown[key] / total * 100);\n  });\n  return breakdown;\n};","map":{"version":3,"names":["calculateProgress","formData","requiredFields","filledFields","filter","field","value","undefined","length","validateForm","every","getValidationErrors","fieldLabels","errors","forEach","push","label","message","getFieldValidation","validations","val","calculateBreakdown","inputs","totalFootprint","breakdown","electricity","transportation","heating","waste","lifestyle","Math","round","electricity_usage_kwh","vehicle_monthly_distance_km","heatingEfficiency","heating_efficiency","recyclingRate","recycling_rate","renewable_energy_percentage","total","Object","values","reduce","a","b","keys","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/utils/formUtils.js"],"sourcesContent":["export const calculateProgress = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const filledFields = requiredFields.filter(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n\r\n  return (filledFields.length / requiredFields.length) * 100;\r\n};\r\n\r\nexport const validateForm = (formData) => {\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  return requiredFields.every(field => {\r\n    const value = formData[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n};\r\n\r\nexport const getValidationErrors = (formData) => {\r\n  const fieldLabels = {\r\n    'household_size': 'Household Size',\r\n    'home_size_sqft': 'Home Size (sq ft)',\r\n    'home_type': 'Home Type',\r\n    'home_age': 'Home Age (years)',\r\n    'electricity_usage_kwh': 'Monthly Electricity Usage (kWh)',\r\n    'heating_energy_source': 'Heating Energy Source',\r\n    'cooling_energy_source': 'Cooling Energy Source',\r\n    'vehicle_monthly_distance_km': 'Monthly Vehicle Distance (km)',\r\n    'vehicle_type': 'Vehicle Type',\r\n    'fuel_type': 'Fuel Type',\r\n    'vehicles_per_household': 'Vehicles per Household',\r\n    'climate_zone': 'Climate Zone',\r\n    'meat_consumption': 'Meat Consumption',\r\n    'air_travel_hours': 'Air Travel Hours per Year',\r\n    'cooking_method': 'Cooking Method',\r\n    'monthly_grocery_bill': 'Monthly Grocery Bill (₹)',\r\n    'waste_per_person': 'Waste per Person (kg/week)',\r\n    'recycling_practice': 'Recycling Practice',\r\n    'income_level': 'Income Level',\r\n    'location_type': 'Location Type'\r\n  };\r\n\r\n  const requiredFields = [\r\n    'household_size', 'home_size_sqft', 'home_type', 'home_age',\r\n    'electricity_usage_kwh', 'heating_energy_source', 'cooling_energy_source',\r\n    'vehicle_monthly_distance_km', 'vehicle_type', 'fuel_type', 'vehicles_per_household',\r\n    'climate_zone', 'meat_consumption', 'air_travel_hours', 'cooking_method',\r\n    'monthly_grocery_bill', 'waste_per_person', 'recycling_practice',\r\n    'income_level', 'location_type'\r\n  ];\r\n\r\n  const errors = [];\r\n  \r\n  requiredFields.forEach(field => {\r\n    const value = formData[field];\r\n    if (value === undefined || value === null || value === '') {\r\n      errors.push({\r\n        field: field,\r\n        label: fieldLabels[field] || field,\r\n        message: `${fieldLabels[field] || field} is required`\r\n      });\r\n    }\r\n  });\r\n\r\n  return errors;\r\n};\r\n\r\nexport const getFieldValidation = (field, value) => {\r\n  const validations = {\r\n    'household_size': (val) => val >= 1 && val <= 15,\r\n    'home_size_sqft': (val) => val >= 200 && val <= 5000,\r\n    'home_age': (val) => val >= 0 && val <= 50,\r\n    'electricity_usage_kwh': (val) => val >= 50 && val <= 2000,\r\n    'vehicle_monthly_distance_km': (val) => val >= 0 && val <= 3000,\r\n    'vehicles_per_household': (val) => val >= 0 && val <= 3,\r\n    'air_travel_hours': (val) => val >= 0 && val <= 100,\r\n    'monthly_grocery_bill': (val) => val >= 2000 && val <= 50000,\r\n    'waste_per_person': (val) => val >= 1 && val <= 5\r\n  };\r\n\r\n  if (validations[field]) {\r\n    return validations[field](value);\r\n  }\r\n  \r\n  return value !== undefined && value !== null && value !== '';\r\n};\r\n\r\nexport const calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total)\r\n  breakdown.transportation = Math.round((inputs.vehicle_monthly_distance_km / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_rate || 0.5;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  Object.keys(breakdown).forEach(key => {\r\n    breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n  });\r\n\r\n  return breakdown;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}