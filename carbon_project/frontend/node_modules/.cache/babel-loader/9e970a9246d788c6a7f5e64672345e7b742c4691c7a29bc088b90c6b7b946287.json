{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor\napi.interceptors.request.use(config=>{var _config$method;console.log('Making API request:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor\napi.interceptors.response.use(response=>{console.log('API response received:',response.status,response.data);return response;},error=>{var _error$response,_error$response2;console.error('API error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);return Promise.reject(error);});export const submitCarbonData=async formData=>{try{console.log('Submitting carbon data:',formData);// Transform vehicles array into individual fields expected by backend\nconst transformedData=transformFormDataForBackend(formData);console.log('Transformed data for backend:',transformedData);const response=await api.post('/predict',transformedData);if(!response.data){throw new Error('No data received from server');}// Calculate breakdown for the results\nconst breakdown=calculateBreakdown(formData,response.data.predicted_emissions);const results={predicted_emissions:response.data.predicted_emissions,confidence_score:response.data.confidence_score,recommendations:response.data.recommendations||[],breakdown:breakdown,input_data:formData,timestamp:new Date().toISOString()};console.log('Results prepared:',results);return results;}catch(error){console.error('Error submitting carbon data:',error);if(error.response){var _error$response$data;// Server responded with error status\nthrow new Error(\"Server Error: \".concat(error.response.status,\" - \").concat(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.response.statusText));}else if(error.request){// Request was made but no response received\nthrow new Error('Network Error: Unable to connect to server. Please check your internet connection.');}else{// Something else happened\nthrow new Error(\"Request Error: \".concat(error.message));}}};export const fetchModelDetails=async()=>{try{const response=await api.get('/model-details');return response.data;}catch(error){console.warn('Could not fetch model details:',error);return{model_type:'Random Forest',version:'1.0.0',training_date:'2024-01-01'};}};// Transform form data to match backend API expectations\nconst transformFormDataForBackend=formData=>{// Calculate total vehicle distance from vehicles array\nlet totalVehicleDistance=0;let vehicleType='none';let vehiclesPerHousehold=0;if(formData.vehicles&&formData.vehicles.length>0){totalVehicleDistance=formData.vehicles.reduce((sum,vehicle)=>sum+(vehicle.monthly_distance_km||0),0);vehiclesPerHousehold=formData.vehicles.length;// Use the first vehicle's type for primary vehicle field\nconst primaryVehicle=formData.vehicles[0];vehicleType=primaryVehicle.type||'none';}// Map meat consumption to string value expected by main.py API\nconst meatConsumptionMap={'vegetarian':'None','occasional':'Low','regular':'High'};// Map shopping frequency to string value expected by main.py API\nconst shoppingFrequencyMap={'daily':'Daily','weekly':'Weekly','monthly':'Monthly','rarely':'Rarely'};// Map heating energy source to expected format\nconst heatingEnergyMap={'electric':'Electric','gas':'Natural Gas','solar':'Solar','none':'None'};// Map vehicle type to expected format\nconst vehicleTypeMap={'bicycle':'Bicycle','motorcycle':'Motorcycle','scooter':'Scooter','car_small':'Gasoline','car_medium':'Gasoline','car_large':'Gasoline','auto_rickshaw':'Gasoline','bus':'Gasoline','train':'Electric','metro':'Electric','taxi':'Gasoline','walking':'None','none':'None'};// Map climate zone to expected format\nconst climateZoneMap={'tropical':'Hot','temperate':'Moderate','arid':'Hot','coastal':'Moderate'};return{household_size:formData.household_size||1,electricity_usage_kwh:formData.electricity_usage_kwh||0,home_size_sqft:formData.home_size_sqft||0,heating_energy_source:heatingEnergyMap[formData.heating_energy_source]||'Electric',vehicle_type:vehicleTypeMap[vehicleType]||'Gasoline',climate_zone:climateZoneMap[formData.climate_zone]||'Moderate',meat_consumption:meatConsumptionMap[formData.meat_consumption]||'Medium',shopping_frequency:shoppingFrequencyMap[formData.shopping_frequency]||'Weekly',social_activity:socialActivityMap[formData.social_activity]||'Medium',vehicle_monthly_distance_km:totalVehicleDistance,heating_efficiency:formData.heating_efficiency||0.5,cooling_efficiency:formData.cooling_efficiency||0.5,heating_days:formData.heating_days||120,cooling_days:formData.cooling_days||90,waste_bag_weekly_count:formData.waste_bag_weekly_count||2,new_clothes_monthly:formData.new_clothes_monthly||2,vehicles_per_household:vehiclesPerHousehold,monthly_grocery_bill:formData.monthly_grocery_bill||300.0};};// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\nconst calculateBreakdown=(inputs,totalFootprint)=>{const breakdown={electricity:0,transportation:0,heating:0,waste:0,lifestyle:0};// Electricity (35-40% of total)\nbreakdown.electricity=Math.round(inputs.electricity_usage_kwh/1000*35);// Transportation (25-30% of total) - calculate from vehicles array\nlet totalVehicleDistance=0;if(inputs.vehicles&&inputs.vehicles.length>0){totalVehicleDistance=inputs.vehicles.reduce((sum,vehicle)=>sum+(vehicle.monthly_distance_km||0),0);}breakdown.transportation=Math.round(totalVehicleDistance/1000*25);// Heating (20-25% of total)\nconst heatingEfficiency=inputs.heating_efficiency||0.8;breakdown.heating=Math.round((1-heatingEfficiency)*25);// Waste (10-15% of total)\nconst recyclingRate=inputs.recycling_practice==='yes'?0.8:inputs.recycling_practice==='sometimes'?0.4:0.1;breakdown.waste=Math.round((1-recyclingRate)*15);// Lifestyle (5-10% of total)\nbreakdown.lifestyle=Math.round(10-(inputs.renewable_energy_percentage||0)*10);// Normalize to total 100%\nconst total=Object.values(breakdown).reduce((a,b)=>a+b,0);if(total>0){Object.keys(breakdown).forEach(key=>{breakdown[key]=Math.round(breakdown[key]/total*100);});}return breakdown;};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$response","_error$response2","submitCarbonData","formData","transformedData","transformFormDataForBackend","post","Error","breakdown","calculateBreakdown","predicted_emissions","results","confidence_score","recommendations","input_data","timestamp","Date","toISOString","_error$response$data","concat","message","statusText","fetchModelDetails","get","warn","model_type","version","training_date","totalVehicleDistance","vehicleType","vehiclesPerHousehold","vehicles","length","reduce","sum","vehicle","monthly_distance_km","primaryVehicle","type","meatConsumptionMap","shoppingFrequencyMap","heatingEnergyMap","vehicleTypeMap","climateZoneMap","household_size","electricity_usage_kwh","home_size_sqft","heating_energy_source","vehicle_type","climate_zone","meat_consumption","shopping_frequency","social_activity","socialActivityMap","vehicle_monthly_distance_km","heating_efficiency","cooling_efficiency","heating_days","cooling_days","waste_bag_weekly_count","new_clothes_monthly","vehicles_per_household","monthly_grocery_bill","inputs","totalFootprint","electricity","transportation","heating","waste","lifestyle","Math","round","heatingEfficiency","recyclingRate","recycling_practice","renewable_energy_percentage","total","Object","values","a","b","keys","forEach","key"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('Making API request:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API response received:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const submitCarbonData = async (formData) => {\r\n  try {\r\n    console.log('Submitting carbon data:', formData);\r\n    \r\n    // Transform vehicles array into individual fields expected by backend\r\n    const transformedData = transformFormDataForBackend(formData);\r\n    console.log('Transformed data for backend:', transformedData);\r\n    \r\n    const response = await api.post('/predict', transformedData);\r\n    \r\n    if (!response.data) {\r\n      throw new Error('No data received from server');\r\n    }\r\n\r\n    // Calculate breakdown for the results\r\n    const breakdown = calculateBreakdown(formData, response.data.predicted_emissions);\r\n    \r\n    const results = {\r\n      predicted_emissions: response.data.predicted_emissions,\r\n      confidence_score: response.data.confidence_score,\r\n      recommendations: response.data.recommendations || [],\r\n      breakdown: breakdown,\r\n      input_data: formData,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    console.log('Results prepared:', results);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error submitting carbon data:', error);\r\n    \r\n    if (error.response) {\r\n      // Server responded with error status\r\n      throw new Error(`Server Error: ${error.response.status} - ${error.response.data?.message || error.response.statusText}`);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      throw new Error('Network Error: Unable to connect to server. Please check your internet connection.');\r\n    } else {\r\n      // Something else happened\r\n      throw new Error(`Request Error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchModelDetails = async () => {\r\n  try {\r\n    const response = await api.get('/model-details');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.warn('Could not fetch model details:', error);\r\n    return {\r\n      model_type: 'Random Forest',\r\n      version: '1.0.0',\r\n      training_date: '2024-01-01'\r\n    };\r\n  }\r\n};\r\n\r\n// Transform form data to match backend API expectations\r\nconst transformFormDataForBackend = (formData) => {\r\n  // Calculate total vehicle distance from vehicles array\r\n  let totalVehicleDistance = 0;\r\n  let vehicleType = 'none';\r\n  let vehiclesPerHousehold = 0;\r\n  \r\n  if (formData.vehicles && formData.vehicles.length > 0) {\r\n    totalVehicleDistance = formData.vehicles.reduce((sum, vehicle) => \r\n      sum + (vehicle.monthly_distance_km || 0), 0\r\n    );\r\n    vehiclesPerHousehold = formData.vehicles.length;\r\n    \r\n    // Use the first vehicle's type for primary vehicle field\r\n    const primaryVehicle = formData.vehicles[0];\r\n    vehicleType = primaryVehicle.type || 'none';\r\n  }\r\n\r\n  // Map meat consumption to string value expected by main.py API\r\n  const meatConsumptionMap = {\r\n    'vegetarian': 'None',\r\n    'occasional': 'Low',\r\n    'regular': 'High'\r\n  };\r\n\r\n  // Map shopping frequency to string value expected by main.py API\r\n  const shoppingFrequencyMap = {\r\n    'daily': 'Daily',\r\n    'weekly': 'Weekly',\r\n    'monthly': 'Monthly',\r\n    'rarely': 'Rarely'\r\n  };\r\n\r\n  // Map heating energy source to expected format\r\n  const heatingEnergyMap = {\r\n    'electric': 'Electric',\r\n    'gas': 'Natural Gas',\r\n    'solar': 'Solar',\r\n    'none': 'None'\r\n  };\r\n\r\n  // Map vehicle type to expected format\r\n  const vehicleTypeMap = {\r\n    'bicycle': 'Bicycle',\r\n    'motorcycle': 'Motorcycle',\r\n    'scooter': 'Scooter',\r\n    'car_small': 'Gasoline',\r\n    'car_medium': 'Gasoline',\r\n    'car_large': 'Gasoline',\r\n    'auto_rickshaw': 'Gasoline',\r\n    'bus': 'Gasoline',\r\n    'train': 'Electric',\r\n    'metro': 'Electric',\r\n    'taxi': 'Gasoline',\r\n    'walking': 'None',\r\n    'none': 'None'\r\n  };\r\n\r\n  // Map climate zone to expected format\r\n  const climateZoneMap = {\r\n    'tropical': 'Hot',\r\n    'temperate': 'Moderate',\r\n    'arid': 'Hot',\r\n    'coastal': 'Moderate'\r\n  };\r\n\r\n  return {\r\n    household_size: formData.household_size || 1,\r\n    electricity_usage_kwh: formData.electricity_usage_kwh || 0,\r\n    home_size_sqft: formData.home_size_sqft || 0,\r\n    heating_energy_source: heatingEnergyMap[formData.heating_energy_source] || 'Electric',\r\n    vehicle_type: vehicleTypeMap[vehicleType] || 'Gasoline',\r\n    climate_zone: climateZoneMap[formData.climate_zone] || 'Moderate',\r\n    meat_consumption: meatConsumptionMap[formData.meat_consumption] || 'Medium',\r\n    shopping_frequency: shoppingFrequencyMap[formData.shopping_frequency] || 'Weekly',\r\n    social_activity: socialActivityMap[formData.social_activity] || 'Medium',\r\n    vehicle_monthly_distance_km: totalVehicleDistance,\r\n    heating_efficiency: formData.heating_efficiency || 0.5,\r\n    cooling_efficiency: formData.cooling_efficiency || 0.5,\r\n    heating_days: formData.heating_days || 120,\r\n    cooling_days: formData.cooling_days || 90,\r\n    waste_bag_weekly_count: formData.waste_bag_weekly_count || 2,\r\n    new_clothes_monthly: formData.new_clothes_monthly || 2,\r\n    vehicles_per_household: vehiclesPerHousehold,\r\n    monthly_grocery_bill: formData.monthly_grocery_bill || 300.0\r\n  };\r\n};\r\n\r\n// Helper function to calculate breakdown (moved from utils to avoid circular dependency)\r\nconst calculateBreakdown = (inputs, totalFootprint) => {\r\n  const breakdown = {\r\n    electricity: 0,\r\n    transportation: 0,\r\n    heating: 0,\r\n    waste: 0,\r\n    lifestyle: 0\r\n  };\r\n\r\n  // Electricity (35-40% of total)\r\n  breakdown.electricity = Math.round((inputs.electricity_usage_kwh / 1000) * 35);\r\n\r\n  // Transportation (25-30% of total) - calculate from vehicles array\r\n  let totalVehicleDistance = 0;\r\n  if (inputs.vehicles && inputs.vehicles.length > 0) {\r\n    totalVehicleDistance = inputs.vehicles.reduce((sum, vehicle) => \r\n      sum + (vehicle.monthly_distance_km || 0), 0\r\n    );\r\n  }\r\n  breakdown.transportation = Math.round((totalVehicleDistance / 1000) * 25);\r\n\r\n  // Heating (20-25% of total)\r\n  const heatingEfficiency = inputs.heating_efficiency || 0.8;\r\n  breakdown.heating = Math.round((1 - heatingEfficiency) * 25);\r\n\r\n  // Waste (10-15% of total)\r\n  const recyclingRate = inputs.recycling_practice === 'yes' ? 0.8 : \r\n                       inputs.recycling_practice === 'sometimes' ? 0.4 : 0.1;\r\n  breakdown.waste = Math.round((1 - recyclingRate) * 15);\r\n\r\n  // Lifestyle (5-10% of total)\r\n  breakdown.lifestyle = Math.round(10 - (inputs.renewable_energy_percentage || 0) * 10);\r\n\r\n  // Normalize to total 100%\r\n  const total = Object.values(breakdown).reduce((a, b) => a + b, 0);\r\n  if (total > 0) {\r\n    Object.keys(breakdown).forEach(key => {\r\n      breakdown[key] = Math.round((breakdown[key] / total) * 100);\r\n    });\r\n  }\r\n\r\n  return breakdown;\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}