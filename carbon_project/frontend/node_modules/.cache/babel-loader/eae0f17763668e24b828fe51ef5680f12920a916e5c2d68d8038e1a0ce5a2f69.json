{"ast":null,"code":"// API service for individual carbon footprint predictions\nconst API_BASE_URL = 'http://localhost:9005';\nclass CarbonFootprintAPI {\n  async predictIndividual(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/predict/individual`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error predicting individual carbon footprint:', error);\n      throw error;\n    }\n  }\n  async createDigitalTwin(userId, type, baselineData, currentData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          type: type,\n          baseline_data: baselineData,\n          current_data: currentData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating digital twin:', error);\n      throw error;\n    }\n  }\n  async updateDigitalTwin(userId, type, data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/update`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          type: type,\n          data: data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating digital twin:', error);\n      throw error;\n    }\n  }\n  async calculateTwinFootprint(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/calc?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error calculating twin footprint:', error);\n      throw error;\n    }\n  }\n  async simulateScenario(userId, scenarioId, type, currentData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/simulate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          scenario_id: scenarioId,\n          type: type,\n          current_data: currentData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error simulating scenario:', error);\n      throw error;\n    }\n  }\n  async getTwinRecommendations(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/recommendations?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting twin recommendations:', error);\n      throw error;\n    }\n  }\n  async getTwinTimeline(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/timeline?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting twin timeline:', error);\n      throw error;\n    }\n  }\n  async applyRecommendation(userId, recommendationId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/apply-recommendation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          recommendation_id: recommendationId,\n          type: type\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error applying recommendation:', error);\n      throw error;\n    }\n  }\n  async getAvatarState(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/visual/avatar-state?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting avatar state:', error);\n      throw error;\n    }\n  }\n  async uploadCSV(file, userId, type) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('user_id', userId);\n      formData.append('type', type);\n      const response = await fetch(`${API_BASE_URL}/api/twin/upload-csv`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error uploading CSV:', error);\n      throw error;\n    }\n  }\n  async getHealthStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health status:', error);\n      throw error;\n    }\n  }\n}\n\n// Legacy function for backward compatibility\nexport const submitCarbonData = async formData => {\n  var _formData$vehicles;\n  const api = new CarbonFootprintAPI();\n\n  // Transform form data to match API format\n  const individualData = {\n    monthly_electricity: formData.electricity_usage_kwh || 0,\n    monthly_transport: (((_formData$vehicles = formData.vehicles) === null || _formData$vehicles === void 0 ? void 0 : _formData$vehicles.reduce((total, vehicle) => {\n      return total + vehicle.monthly_distance_km * 0.2; // 0.2 kg CO2e per km\n    }, 0)) || 0) + formData.walking_cycling_distance_km * 0.05,\n    monthly_waste: formData.waste_per_person * 4 * formData.household_size || 0,\n    monthly_shopping: formData.monthly_grocery_bill * 0.0005 || 0,\n    diet_type: formData.meat_consumption || 'vegetarian',\n    heating_type: formData.heating_energy_source || 'electric',\n    monthly_heating: formData.electricity_usage_kwh * 0.3 || 0,\n    monthly_water: formData.household_size * 100 * 0.0003 || 0\n  };\n  return await api.predictIndividual(individualData);\n};\nexport default CarbonFootprintAPI;","map":{"version":3,"names":["API_BASE_URL","CarbonFootprintAPI","predictIndividual","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","createDigitalTwin","userId","type","baselineData","currentData","user_id","baseline_data","current_data","updateDigitalTwin","calculateTwinFootprint","simulateScenario","scenarioId","scenario_id","getTwinRecommendations","getTwinTimeline","applyRecommendation","recommendationId","recommendation_id","getAvatarState","uploadCSV","file","formData","FormData","append","getHealthStatus","submitCarbonData","_formData$vehicles","api","individualData","monthly_electricity","electricity_usage_kwh","monthly_transport","vehicles","reduce","total","vehicle","monthly_distance_km","walking_cycling_distance_km","monthly_waste","waste_per_person","household_size","monthly_shopping","monthly_grocery_bill","diet_type","meat_consumption","heating_type","heating_energy_source","monthly_heating","monthly_water"],"sources":["C:/Users/Keert/OneDrive/Desktop/Final Year Project/carbon_project/frontend/src/services/api.js"],"sourcesContent":["// API service for individual carbon footprint predictions\nconst API_BASE_URL = 'http://localhost:9005';\n\nclass CarbonFootprintAPI {\n  async predictIndividual(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/predict/individual`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error predicting individual carbon footprint:', error);\n      throw error;\n    }\n  }\n\n  async createDigitalTwin(userId, type, baselineData, currentData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          type: type,\n          baseline_data: baselineData,\n          current_data: currentData\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating digital twin:', error);\n      throw error;\n    }\n  }\n\n  async updateDigitalTwin(userId, type, data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/update`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          type: type,\n          data: data\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating digital twin:', error);\n      throw error;\n    }\n  }\n\n  async calculateTwinFootprint(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/calc?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error calculating twin footprint:', error);\n      throw error;\n    }\n  }\n\n  async simulateScenario(userId, scenarioId, type, currentData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/simulate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          scenario_id: scenarioId,\n          type: type,\n          current_data: currentData\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error simulating scenario:', error);\n      throw error;\n    }\n  }\n\n  async getTwinRecommendations(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/recommendations?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting twin recommendations:', error);\n      throw error;\n    }\n  }\n\n  async getTwinTimeline(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/timeline?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting twin timeline:', error);\n      throw error;\n    }\n  }\n\n  async applyRecommendation(userId, recommendationId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/twin/apply-recommendation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          recommendation_id: recommendationId,\n          type: type\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error applying recommendation:', error);\n      throw error;\n    }\n  }\n\n  async getAvatarState(userId, type) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/visual/avatar-state?user_id=${userId}&type=${type}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting avatar state:', error);\n      throw error;\n    }\n  }\n\n  async uploadCSV(file, userId, type) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('user_id', userId);\n      formData.append('type', type);\n\n      const response = await fetch(`${API_BASE_URL}/api/twin/upload-csv`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error uploading CSV:', error);\n      throw error;\n    }\n  }\n\n  async getHealthStatus() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health status:', error);\n      throw error;\n    }\n  }\n}\n\n// Legacy function for backward compatibility\nexport const submitCarbonData = async (formData) => {\n  const api = new CarbonFootprintAPI();\n  \n  // Transform form data to match API format\n  const individualData = {\n    monthly_electricity: formData.electricity_usage_kwh || 0,\n    monthly_transport: (formData.vehicles?.reduce((total, vehicle) => {\n      return total + (vehicle.monthly_distance_km * 0.2); // 0.2 kg CO2e per km\n    }, 0) || 0) + (formData.walking_cycling_distance_km * 0.05),\n    monthly_waste: (formData.waste_per_person * 4 * formData.household_size) || 0,\n    monthly_shopping: formData.monthly_grocery_bill * 0.0005 || 0,\n    diet_type: formData.meat_consumption || 'vegetarian',\n    heating_type: formData.heating_energy_source || 'electric',\n    monthly_heating: (formData.electricity_usage_kwh * 0.3) || 0,\n    monthly_water: (formData.household_size * 100 * 0.0003) || 0\n  };\n\n  return await api.predictIndividual(individualData);\n};\n\nexport default CarbonFootprintAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}